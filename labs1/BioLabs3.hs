module BioLabs3(
		giveMass,
		protNumRNA,
		findMotif2
		)
where
import BioLabs1
import BioLabs2
import Data.List
import Data.Char
import Data.String.Utils

{-
Calculating Protein Mass http://rosalind.info/problems/prtm/

Given: A protein string P of length at most 1000 aa.
Return: The total weight of P. Consult the monoisotopic mass table.

Sample Dataset
SKADYEK
Sample Output
821.392

giveMass "SKADYEK"
821.3919199999999
-}
massTable :: Char -> Double
massTable 'A' =   71.03711
massTable 'C' =   103.00919
massTable 'D' =   115.02694
massTable 'E' =   129.04259
massTable 'F' =   147.06841
massTable 'G' =   57.02146
massTable 'H' =   137.05891
massTable 'I' =   113.08406
massTable 'K' =   128.09496
massTable 'L' =   113.08406
massTable 'M' =   131.04049
massTable 'N' =   114.04293
massTable 'P' =   97.05276
massTable 'Q' =   128.05858
massTable 'R' =   156.10111
massTable 'S' =   87.03203
massTable 'T' =   101.04768
massTable 'V' =   99.06841
massTable 'W' =   186.07931
massTable 'Y' =   163.06333 
massTable  x  =   0.0

giveMass :: String -> Double
giveMass str = foldl (\x y ->x + massTable y) 0 str

strMass = "PLMHDNFAMADEALDTFAGQNEREDHKQFCVCYINDERAPWWSSKASNAYAQISRGEFWLCIQVIPFWLWILTEQLQSYYGFKNTTRGNTVTAHRIKYWQDHHKNEKNYGQRNGETHFLNDLRMFQWLVNRRTDDHWIWTRLWTIWKDYLYMICPPGPHEEWMRRRECAFAALYMEHHCGSEYEMAIVLKHSINPNVPCEPFCCHIRFCYMSKYQQDGKWHVTIYYHLPCPMMNRQARFSADLDWVNYEARACQHSDVTSQKSKQYMICCCATVWMDPAHKCIKDRDRMSMYIGPEMYGHLQETLSDEMNGGIEVIVMDLQIYRFEFSRTDGLPLPPMRRGKVNFWKLWVSSGVQEFCKCDFCPPDCQEINATQEHWIYSYTGNEALLVIVPVMVTRATMCIDGEIEPSKSVYWAIRYYIDQLKIVSFYYEWIEILYFARKCTKFSWYCHYYQMSCQSWNLHMGGYRRMWKGCSNCFTDHQEMPQKQIETYASQCRTMDVWVFANDDHFPCWRPAKVNHEFFWQCWDEIGYFHTFTIGKECCFNSTMYILEFWRPAPMMWPAPDSKYVPEIGHKGWSMPTYEPRTQMQTITFLRTDMCKEGQENWLSCSLPHLNSIHRSAAVYNWCVHGRFPPCTCKREECEFGKMVALTHVHWLPNIKEMTWSEIWIAISYLKRFKYVMHHGMMTQVKRQGIPQSPREQKQWKLIIWWRHHYMQMVHKPHCQHNHAWADLTQELLKTHRPFQIAHVHKCCGITFHQNINWQHWYTILQRKHYDKGFQPTIKDINAIHQEKEPRAMYLEQVSYHKTCNCIMLQPMFCGIDSPVTFYLFEFREQKEGDQTLMQGGFPPFYSNGAQMHCCEKFWDHIDFMSECDGYCILLMDVIQGEAWFFEMGDASFMISARRFYF"
{-
Inferring mRNA from Protein

Given: A protein string of length at most 1000 aa.
Return: The total number of different RNA strings from which the protein could have been translated, modulo 1,000,000. (Don't neglect the importance of the stop codon in protein translation.)

Sample Dataset
MA
Sample Output
12

protNumRNA "MA"
12
-}
proteinTableR :: Char -> [String]
proteinTableR 'F' = ["UUU","UUC"]
proteinTableR 'L' = ["UUA","UUG","CUU", "CUC", "CUA","CUG"]
proteinTableR 'I' = ["AUU","AUC","AUA"]
proteinTableR 'V' = ["GUU","GUC","GUA","GUG"]
proteinTableR 'M' = ["AUG"]
proteinTableR 'S' = ["UCU","UCC","UCA","UCG","AGU","AGC"]
proteinTableR 'Y' = ["UAU","UAC"]
proteinTableR 'P' = ["CCU","CCC","CCA","CCG"]
proteinTableR 'T' = ["ACU","ACC", "ACA", "ACG"]
proteinTableR 'H' = ["CAU","CAC"]
proteinTableR 'N' = ["AAU","AAC"]
proteinTableR '*' = ["UAA","UAG","UGA"]
proteinTableR 'A' = ["GCU","GCC","GCA","GCG"]
proteinTableR 'Q' = ["CAA","CAG"]
proteinTableR 'D' = ["GAU","GAC"]
proteinTableR 'C' = ["UGU","UGC"]
proteinTableR 'G' = ["GGU","GGC","GGA","GGG"]
proteinTableR 'K' = ["AAA","AAG"]
proteinTableR 'E' = ["GAA","GAG"]
proteinTableR 'R' = ["CGU","CGC","CGA","AGA","CGG","AGG"]
proteinTableR 'W' = ["UGG"]
proteinTableR x = []

protNumRNA :: String -> Integer
protNumRNA str =let 
				f z = fromIntegral $length $proteinTableR z;
				mm = 1000000;
				fun a b = mod (a*(f b)) mm;
				in (foldl (\x y -> fun x y) 3 str)

lstProtNum = "MSLQEDEKGFPIIPNDRKCDLINILDPTKGYIFPTASEQGWWVWRHELTHAQANWRITKGEVQFLAHTALWHHMTLGAWIIDNGATPFHLDSRFASMAIDTMGWFYHFPASHAKFGNDRITKFTEACAKISWDDYQLSVFANAFLNLKSLAMQTMHVRTQTKVKPTGHNQNFFMTPIEAAGPCEPYSHTWIMLEDGCGLHQKCIELRGKSTFYMGYDSGMILQCFYERLHMHRPTVYPENLAAWNAAVCNLEHSGESCEEFGNGGHCYITIEECVHCVADRGSKDMILIIYQPANKVKDETDNKGCAAKANEYQIRGHNAAFDPFAWQDPMSSVEMWAIHRMHVQTMQLSGKRDQHSNTSFNAQEWVCNPGRFVMQIHHNKYNNRPHILKFGYFSDCTWKQVRVIMGWCSGPVQHHRTQSWIAHEWVGRKCGSRSTDVDCAISFINSDPFYKSFMAICRIFFMTDPSGTEKGFQNSKTRHCWGDIVDSDIMCYFSYKIKQCLMYQRDITEFNLTHKWHCRVTPYACLTEKCETHCAFQLKYMSNKWCWMCSKMNNDFRHCPECNWTRECVIYIVFCAWHLIIHSYLQYVKLCTDVCIKVRGWEVEISCQLPNHCFSCCPQWFNNNRKKGERTFVCKAVQEFRPASINGMNAEVFFAYREEYERVSFSKEIWTDQDVMDNMPHSRKRRTAWGQFAKHQMRLEFQAWCDWAVFKHYSPKYTCMETYNAIQRFRWMARFSCHNTDYCMVVVPRNDFDIMDRAKHDNHAPVDNKECFNQHSKSAGEKEVTGSQNNENARWLEHVDWNGKWGHFLSFVPQKEHIFSDDFMMLMGLARATKFLDRQMCTCMVWWPFIHHIFQGLRRCFQVYMHWPYAKFKDSAMPIFPRHWAALSPNRGMCQCMPHHNCGYGGIDTMYFKLHPFNFELIVIANAEIDEGNMAWRFMRAICNFTAPCADEIPHIEHCWHAPHPDYMNPGSCCNWSGIGFLREACPTKATWNRAM"

{-
Finding a Motif in DNA  http://rosalind.info/problems/subs/

Given: Two DNA strings s and t (each of length at most 1 kbp).
Return: All locations of t as a substring of  s.

Sample Dataset
GATATATGCATATACTT
ATAT
Sample Output
2 4 10
findMotif "GATATATGCATATACTT" "ATAT"
[2,4,10]
-}


findMotif :: String -> String -> [Int]
findMotif lst ll = map (+ 1) $findIndices (\x -> startswith ll x) (tails lst)



lstMm = "CCCCGACACCCGACACCGGCCCGACACCCGACAGTGTGTCCCCGACAATCGCGGCCCGACAGCCCGACAACGGGCCCGACATCCCCGACACCCGACACCCGACAACTAGACCCGACAACCATTACCCGACATGCCCGACATGCCCGACATCCCGACAGAGTTCCCGACAGTTGCCCGACACCCGACAAGCCCGACAGACCCGCCCGACAGACCCGACACCCCCGACACGCCCGACATCCCAGTCGATCCCGACAGAGGCCCGACACCCGACACCCGACAACCCGACAACCCCTTCATGGCCCGACAGGCCCGACACCCGACACCTAAACCCGACACCCGACATCGGCCCGACATGCCCCGACACACCCCGACACCCGACAGCCCGACAGACCCCGACATCCCGACAGCACCGACACCCCGACACCCGACAGACTCCCGACACCCGACAGTATTCCCGACAAACAGCCCGACACGCCCGACACACAAACCCGACAATCCCGACAAGCCTCGCCCCGACATGGCCCGACACCCGACATTCCCGACACCCGACACCCGACACCCGACATGACCCGACACCGCTCCCCGACAAAACTATCCCGACACTATGACTAAACCCCGACAGTCTCAACACCCCGACATTCCCGACACGTCACCCGACACCCGACAGCCCCGACACTGGTAGGGGCTCCCGACATAACCCCGACACCCGACACCCGACACGCCCGACAGCCCGACACTCTCCCGACACCCGACAAAAACCCGACACCCGACACAGCCCCGACATCCCCCCGCGCCCGACACCCGACA"
lstL = "CCCGACACC"

{- del_heresy::a->String
del_heresy el = let
				str = show el;
				str2 = delete '[' str;
				str3 = delete ']' str2
				in replace "," " " str3 -}
findMotif2 :: String->String->String
findMotif2 lst ll = let
				str = show $findMotif lst ll;
				str2 = delete '[' str;
				str3 = delete ']' str2
				in replace "," " " str3
{-
Pattern Matching Problem http://rosalind.info/problems/1c/
Given: Strings Pattern and Genome.
Return: All starting positions in Genome where Pattern appears as a substring. Use 0-based indexing.

Sample Dataset
ATAT
GATATATGCATATACTT
Sample Output
1 3 9

findMotif20 "ATAT" "GATATATGCATATACTT"
"1 3 9"
-}

findMotif0 :: String -> String -> [Int]
findMotif0 lst ll = findIndices (\x -> startswith ll x) (tails lst)				

findMotif20 :: String->String->String
findMotif20 ll lst = let
				str = show $findMotif0 lst ll;
				str2 = delete '[' str;
				str3 = delete ']' str2
				in replace "," " " str3

lstMot0ll = "AAGGTGAAA"
lstMot0lst = "AAGGTGATAAGGTGACAAAGGTGAAAGGTGAAAGGTGAGAAAGGTGAGAAGGTGAGTTCAAAGAGAAAGGTGAAAGGTGAAAGGTGAAAGGTGAAAGGTGACAAAGGTGAAAGGTGAAAAGGTGAAAGGTGAGAAGGTGATAAGGTGAAAGGTGAAAAGGTGAAAGGTGAGGAAGGTGAAAGGTGATGGAAGGTGAGAAGGTGAGAAGGTGAAAAGGTGAAAGGTGAAAGGTGAAAGGTGATGGACAAAGGTGAAAGGTGAGCCAAGGTGAAAAGGTGAGAAAGGTGAAAGGTGAAAACGTTGGGAAAGGTGAAAAGGTGAGGGAAAGGTGAGTGTTTAAAGGTGAAAGGTGATTAAGGTGACATAAGGTGATCGAGCGACTTTTCAAGGTGAGAAGGTGAGCGCAAAGGTGAGAAGGTGAAGAAGGTGATTAAGGTGAAAAGGTGACCATCAAAGGTGAAAGGTGAATAAAGGTGAAAAAGGTGAGTAAGGTGAAAGGTGAAGAAGGTGATAACAAAGGTGAAAGGTGAGGAAGGTGAAAGGTGACACGGCAAGGTGAGCAAGGTGAGCAAGGTGAATCAAGGTGAGAAGGTGACATAAGGTGAAAGGTGAGGAAGGTGAGCAAGGTGAAAGGTGACCAAGGTGAGGCGAAAGGTGAGAAGGTGAGTGAAAGGTGAAAGGTGAAAATAAGGTGATAAGGTGAATTAAGGTGAGACAAGGTGACAAAGGTGACAAGGTGACCTCAACTGAAGGTGAAAGGTGAGCAAGGTGAAAAGGTGACTAACCAAGGTGAAACAAAGGTGAAAGGAAGGTGATAAGGTGAGTGAAGGTGACAAGGTGATAAGGTGACGAAGGTGAGGAGCAGTGAGTTAAGGTGAAAGGTGAAAGGTGAGAAGGTGAGTGAAGGTGAGATAAGGTGAGTAAAGGTGAGAACGGAGACCAAGGTGACAAGGTGAAAGGTGATAAGGTGAAAGGTGAGAAGGTGAGGCGACAAGGTGAACAAGGTGACAAGGTGAAAGGTGATAAGGTGAGCAAAGGTGAAAGGTGAAACAAGGTGAACTTAATTGAAGGTGAAAACCATAAGGTGAAGCTGAAGGTGATTAAGGTGATCTAAGGTGAAAGGTGAAAGGTGACCTACACTAAGGTGAAAGGTGATAAAGGTGAGCCGCCAGAAGGTGAATTACGCAAGGTGAGAAGGTGAAAAGGTGACTAAGGTGAGCCAAGGTGAAAGGTGAAAGGTGAGCGAAGGTGATAAGGTGATAAGGTGAAAGGTGAATCAAGGTGAGGAAGGTGACAAGGTGAAAGGTGATTGCGGAGCAAGGTGAAAAGGTGACGTATAAGGTGAGAAGGTGATAGTACTGAAGGTGAGAAAGGTGAAAAGGTGACAAGGTGATCCGGAAGGTGAAGTTAAAAGGTGACGCGAAGCGGCTCTGTAAAGGTGAAAGGTGAAATAAGGTGACAAGGTGATTAGAACTAGCCAAGGCGAAGGTGAAAGGTGAGAAGGTGATTATCAAGGTGAGCTAAGAACTGAAAGGTGAGCATCTAAGGTGAACCAAAGGTGACCCCAAGGTGACTGAAGGTGATACAAGGTGAAAAGGTGAAAGGTGATTTTAAAGGTGAAAAAGGTGACGCAAGGTGACAAGGTGACGCTAAGGTGAAAGGTGAAAAGGTGAGTAGAAGGTGATAAGGTGAAATCTTGAAGGTGAAAGGTGACGAAGGTGAGAAGGTGAATTAAGGTGAGTAAGGTGATTTGGGCGCCAAGGTGAAAGGTGAGTGGTCAGGGAAGGTGAAAGGTGAGGTAAAGGTGACGCAAGGTGAAAAGGTGACACCGTCAAGGTGAGAAGGTGAATCCAAGAAAGGTGAAAGGTGAAAAGGTGATTCAAGGTGAATCAAGGTGACCAAGGTGAGTAAGGTGAAAGGTGACCCAAGGTGATCAAGGTGAAAGGTGAAAGGTGATAAGGTGAGCTACAAGGTGAAAGGTGATTAAGGTGAAATTGCTAAGGTGAATATGCCAAAGGTGAAAGGTGACTTAAAGGTGAAAGGTGAAAGGTGACGGAAGGTGACAAGGTGATGCCTAAGGTGATCTAAGGTGAAAGGTGAAAGGTGAGATCAAGGTGAATAAGGTGAGGAAAGAAAGGTGAAAGGTGATGTTAGAAGGTGACAAGGTGAAAGGTGAAAAGGTGATAAGGTGAAAGGTGAAAGGTGAGCTCCAGGCGAAGGTGAAAGGTGAGTCAAGGTGACAAGGTGATTAGTAAGGTGACAAAGGTGACCAAGGTGAGACAAGGTGAAAGATTGAATAAGGTGAACCCAAGGTGATTGTATGCAAGTTCCCCTAAGGTGAAAGGTGAAAAGAAGGTGATGTGTCGATTTCTGAATAAGGTGAAAGGTGATAAGGTGAGGATAAGGTGATCAAGGTGAACCGGTCTTCAAGGTGAGCAAAGGTGAACTGAAGGTGAAAGGTGAGAAGGTGAAAGGTGAAAGGTGAAAGGTGATAAGGTGACGAAGGTGACGTACAAGGTGAGATAAAGGTGAAAGGAAAGGTGAAAAGGTGATAAGGTGACAAGGTGAATAATAAAAAAGGTGATAAGGTGAACCAAAGGTGAACAAGGTGAAAGGTGAAAGTGCGTAAGGTGAGTAAAGGTGATGAAGGTGAAAGGTGATAAGGTGAAAGGTGAGAAAGGTGAGACAAGGTGAGCAAGGTGACACAGCTCAAGGTGAAAAAGGTGAAAGGTGAGGAAGGTGACAAGGTGAAAGGTGAAAAAGGTGAAAGGTGAAAGGTGACAAGGTGAGAAAAAGGTATAAGGTGAGGAAGGTGATGAATCGTGGAGCCTAAGGTGAAAGGTGATTAAGGTGAAAAGGTGACAAGGTGAATAAGGTGACCGAAGGTGACCTGGATAAAGGTGACAAATGAAGGTGAAAGGTGAAAGGTGAAAGGTGATAAGGTGAAGTAAGGTGAAAGGTGAGCAAGGTGAGTCAAGGTGACCGGAAGGTGAAAGGTGATAAGGTGAGTAAGGTGAAGATAAGGTGAAAGGTGAAAGGTGAAGAAGGTGATACTTAAGGTGACCAAGGTGAGCTAAGGTGATTGGAAAGGTGAGGATAAGGTGATAAGGTGAGCCTAAGGTGACATTTAAGGTGAAAGGTGAGATTGAAGGTGAGGTAAGGTGAGGGAGTTCTACAAAAGGTGATGTAAGGTGAGGTTAAGGTGACGAAGGTGATTACAAGGTGAGGCCAAGGTGAAAGGTGACTGTAAGGTGAGCTAAGGTGAAAAGGTGAAAGGTGAAAGGTGAAAGGTGAAAAGGTGAGAAGGTGAGGGAAGGTGAAAAAGGTGACGTGAAGGTGATAAGGTGAGAAAGGTGATCGAGTAAGGTGATCAGCCGAAGGTGAAGAAAAGGTGACATAAGGTGAGAAAGGTGATTAAAGGTGAGTCAGACGCCAAGGTGAAGCGGAGGAAGGTGAAAAGGTGACTTAAGGTGAATGGCAAGGTGAAGCAAGGTGAGAGAAGGTGACTTAAGGTGAAAGGTGAAAGGTGAAAGGTGAGAAAGGTGATAAGGTGATTAAGGTGAAAAGGTGAAAGGTGACGGCGACAGTAAGGTGAAAGGTGATATAAGGTGACCAAGGTGACGAAGGTGAAAGGTGACAACCCAAGGTGACCAAAGGTGAAAGGTGAACCAAGGTGATAAAGGTGAGGAAAGGTGACCGAAGGTGACGCAAAGGTGAGGTGCACGGAAAGGTGAAAGGTGAAAGGTGACTGTTCAAGGTGACAAGGTGACAAGGTGAGAAGGTGAATCAAGGTGATAAGGTGAGAAGGTGACAAGGTGAAAAGGTGACTCAAGGTGAGCCTAAGGTGAAGCGTAAAGGTGAGTAAGGTGACGAAGGTGAATGCAGAAGGTGAGGTAAGGTGACGGTCGAAGGTGAGCCTATTCCTGAAGGTGACACAAGGTGATAATGAAGGTGATAAGGTGACAAGGTGAGTAAGGTGAAAGGTGACAAGGTGAACCTAAGGTGAAAGGTGATCAAGGTGATCAAGGTGAAAGGTGAGAAGGTGATTGTGGAACGAAGGTGATAAGAAGGTGAGGAAGGTGAGTAAGGTGAAAGGTGAAAGGTGAACAGAAGGTGAGAAAGGTGAATAAGGTGATAAACAGGTGTAAGAAGGTGAAAAGGTGAAAAGGTGAAATAAGGTGAAAGAGTTTGGAAGGTGATCCTAAGGTGATAAGGTGAAGTAAGGTGACAAGGTGATGGAAGGTGAAAGGTGAAAGGTGAAAGGTGACAAGGTGACTAAAAGGTGAAAGGTGAGAAGGTGACTGAAGGTGAAAGGTGACCGCCAAAGGTGAACACAAAGGTGAGGAAGGTGACCCAAGGTGAAAGGTGAAAGGTGATCTAAGGTGAAAGGTGAAAGGTGAATTTCAAGGTGAAAGGTGAAAGGTGAACAAGGTGACTAAGGTGATTCTGGCAAGGTGATTTAAGGTGACAAGGTGACATTTACAAAGGTGAGGTAAAGGTGAGGGGTCGCACAAGGTGATATGAGACAAGGTGAAAGGTGAAAAGGTGAAAAGGTGAAAGGTGAAAGGTGAAGGCGTAAGGTGAATAAGGTGAAAGGTGAAAGGTGAAGAAGGTGAAAGCCAAGGTGAAAGGTGACGAAGGTGAGCAAGGTGACCCGGGAAAGGTGAAACATCTGAAGGTGATAAGGTGATGAACCGGTCAAGGTGAGTAAGGTGACAAGGTGATGATATGCGCTTATCCATGAAGGTGAGAAGGTGAAAGGTGAAAGGTGAAAGGTGATGGGTAAGGTGACCTAAGGTGACAGTAAGGTGAATTAAAAAGGCAAGGTGAAAGGTGAAAAGGTGATAAGGTGAGCTTATCCAAGGTGAACTGTAAGGTGAGGAATGCCGATGAAAGGTGAATATGAAGGTGAGCGAAGGTGAGTCTCACTAAGGTGACTTACTTTAAGGTGACCGTAAGGTGACGCCAAGGTGAAAAAGGTGAGAAGGTGAAAAGGTGAAAGGTGACGGCAAGGTGATGCGAAGGTGAAAGGTGACACAAAGGTGATTAAAGGTGACAAACCGACCCAAGGTGAAGGAAGGTGAACCGCACTAAGGTGATGAGGCAAGGTGATAAGGTGAACAAGGTGACGAAGGTGATCAAGGTGAAAGGTGAAAGGTGATACACTGTAAGGTGAAAAGAAGGTGAGAAGGTGAGGAAGGTGACGCAAAGGTGATCAAGGTGATACGAAGGTGAATGCTATAAGGTGAATAAGGTGAAGCTCTAAGGTGACAACAGAAAGGTGACCAGCAAGGTGAGAAAGGTGATAAGGTGAAAGGTGAGCGAAGGTGATTATAAGGTGAGGTGTTCGGCTCCTTAAAGGTGAGGAGCCAAGGTGAACAAGGTGACCCGCAGGAAGGTGAAGCAAGGTGAACGCAAGGTGACGATAAAGGTGACAAGGTGAAAGGTGAACGAAAGGTGATGTAAGGTGAGCCTTAAGGTGATGAAGGTGAGAGCCGTAACAAGGTGATAAAGGTGACAAGGTGATGGAAGGTGAGAAGGTGATCCGTAAGAAGGTGAACTAAGGTGAAAAGGTGAAAAGGTGATAAGGTGAGGAAGGTGAAAAGGTGATCAACAAGGTGATTGAAAGGTGAAAGGTGACGTAAGGTGACAAAGGTGAAAGGTGAAGGGTTAGAAGGTGAGTAAGAAGGTGACCGATCAAGGTGAGGAAGGTGAAAGGTGAAAGGTGATCGAAGGTGAAAGGAGCCGAAGGTGAGCAAGGTGAAAGGTGAGAAAGGTGATGGCAAGGTGACCAAGGTGAGATGTACAAGGTGAAAGGTGATTAACGTCGAAGGTGAAAGGTGAAAAGGTGACTCAAGGTGAAACTCAAAGGTGACAAAGTAAGGTGATAAGGTGAAAGGTGAGCTAAGGTGAAAGGTGATCGGAAAGGTGAGGGAAGGTGAACCCAAGGTGAAAGGTGATAAGGTGAAAAGAAAAGGTGAACCAAGGTGAAAGGTGAAAGGTGAAAGGTGAAAGGTGACAGAAGGTGAACGAAGGTGATGAAGGTGAAAGGTGATGACTGAAGGTGAAAAGGTGAAAAAGGTGAAAGGTGAGAAGGTGACTCCCTCGAAGGTGACAAGGTGATAAGGTGAGAAGGTGAATAAGGTGATCAAACTTGCTTGAAGGTGAATACGAGCAAGGTGAAAGGTGATGATCAAGGTGAAAGGTGACATCGAAAGGTGAGAAGGTGACAGAAGGTGAGTGAAGGTGAAAAGGTGAATCAACGTTTACGAAAGGTGACGTAAAGGTGAGGACCAAAGGTGAGGAAAGGTGACAAGGTGAGAGTGAAAGGTGATCGTAAGGTGATAGTGAAGGCGCGCTAAGGTGACCGTAAGGTGACGGTTAAGGTGAAAGGTGAGTCCCTTAAGGTGAAAGGTGAGAAGACAGGTATATGAAAGGTGAAAGGTGACAAGGTGAAAGGTGAAAAGGTGATAAAGGTGAAGAAGGTGAAAGGTGAAAGGTGAATCGTACATGTAAGGTGAGTAAAGGTGACTATCAAAGGTGAGTTTATTAAGGTGAAAGGTGACCCAAGGTGAATATAAGGTGAAAGGGCGAAGGTGAAAGGTGAAAGGTGAGTAAGGTGAAAGGTGACTGGGAAGGTGACTCACGTTAAGGTGACGAAGGTGAAAGGTGATCAGTTGAAAAGGTGAAAGGTGAAAGGTGAAAGGTGATAAGGTGATGGTAGGTAAGGTGAAAGGTGAAAGGTGAGCCCAAAGGTGATAAGGTGACAACTCAAGGTGATGGTTAAAGGTGATGGCAAAGGTGAAAGGTGAAAAGGTGAAAAAAGGTGATCGAAGGTGAGTAAGGTGAAAGGTGAGTGGAAGGTGAAAGGTGAGGTAAGGTGACAAGGTGAAAGGTGAAAAGGTGACTAAGGTGATAAGGTGATAAGGTGACTTAAGGTGATTCGGGACAGCTAGATGGAAGGTGATCAACTAAGGTGACACCAATTAACTTGCCGGTGAAGGTGAGGTTAAGGTGAAAGGTGACTCAAGGTGAAAGGTGAGAAGGTGACAAGGTGAAAAGGTGAAAAAAGGTGAAGTGTGCAAGGTGAAGCGGAAGGTGAAAAGGTGATCCAAGGTGAGCCTTGGAACTGCGGATCAGTTAAGGTGAAAGGTGAGAAGGTGAAAAGGTGACAAGGTGAACCGAAAAGGTGACGGGGAAGGTGAGGGAGCCAGGAAGGTGACGCACAAGGTGACAAGGTGAGAAAGGTGAAAAGGTGATGGGAAGGTGAAAAGGTGAGTAGGAAGGTGAGTAAGGTGAAAGGTGACAGGAAAAGGTGACGCGCAAGGTGAGCTATAAGGTGAGGTTAACAAGGTGAAAGGTGAAAGGTGAAGTAAAGGTGAAAGGTGAAAGGTGAAAAGGTGAAAGGTGATAGAAGGTGATGAAGGTGAAAGGTGACCAAAGGTGAACTAAGGTGAAAGGTGATAAGGTGAGATAAAGGTGAAAGGTGATATCAAGGTGAAAGGTGAGGATCTAGATTAAGGTGAAAGGTGATGTGCAAGGTGAAGGGTAAGGTGATAAGGTGAACCGACAAAGGTGAGGGAAAAAAGGTGAGAAGGTGACCGAAGGTGAGCAAGGTGAGGGCCTTATCTAGTGACCAAGGTGAAAGGTGAAAGGTGACTTAGGGAAGTAAGGTGAAAGGTGACTCAAAGGTGACGGAAAGATTAAGGTGACCGAAGGTGAAAGGTGAGCAAGTAAGGTGAAGCAGTCCAAGGTGACAAGGTGAAAAGGTGATAAGGTGAACAAGGTGACTAAGGTGAAAGGTGAAAGGTGAAAGGTGATCAAGGTGAAAGGTGAAAGGTGATATGGCAAGGTGAAAAGGTGAGATAAGGTGATCAAGGTGACCGGACAAGGTGACACGTCGAAGGTGACGAAGGTGATGCTGAAAGGTGATCACCCCAAGGTGAGGATTAAAAGGTGAACCCCCAAGGTGAAAAGGTGAAGATTAAGGTGATGAAGGTGAAAAGGTGATTCTCGATAAGGTGAAGATCCGAAAAAGGTGAAAGGTGAAAGGTGACGGAAGGTGAAAGGTGAAGAAAGGTGAAGAAGGTGAAAGGTGAAACGCAATAAGGTGAAAGGTGAGGTTGTATGGCAAGGTGAATCAACGCACGAAAGGTGAAAGGTGAGCCAGCAAGGTGAAAGGTGAAAGGTGATAAGGTGACTACCAAGGTGATAAGGTGAAAGGTGATGTAAGGTGAGCTAAAGGTGACTAAGGTGAAAGGTGATAAGGTGAAAGGTGAAGTTTCAAGGTGATTCGATTAAGGTGAAAGGTGAGCATACATGCCCCGTGAAGGTGAAAGGTGAATGATTAAGGTGACTCCAAGGTGAGTATTAAGGTGAAAGGTGAGGAATAAGGTGAACGTACCGAACCAAGGTGAGTTAAAGGTGAACACTAAAGGTGAAAAGGTGAGAGTAAGGTGAAAGGTGAGCCAAAGGTGAACAAAGGTGACGAAAGGTGATAAGGTGATTGTCAAGGTGAAAGGTGAGCAGAAAGGTGAAAGGTGACCAAGGTGAGAAGGTGACTCACTAAGAAAGGTGAGGTTAAGGTGACATAAGGTGAAAGGTGAACAAGGTGAAAAAGGTGAAAGGTGACGCGCTCAAGGTGACAAAAGGTGATCAAGGTGAGTAAGGTGACGGAGAAGGTGACAAGGTGACTAAGGTGATTGAAGGTGACTGAAGGTGAATGAAGGTGAACAAGGTGAAAGGTGAGGTAAGGTGAGGTTAAGGTGAAAGGTGAAAGGTGATGGCAAAAGCAAGGTGAAAGGTGAGTAAGGTGAAGTTGGTAAGGTGACTGAAGGTGACCGAAGGTGAAAGGTGAAAGGTGATAAGGTGACCAAGGTGAGTGAAGGTGAGAGAAGGTGAAAGGTGACTTAAGGTGAAAGGTGAGAAGGTGAGATCCAAGGTGATCAACCAAGGTGAAAAGGTGAAACAAGGTGAAAAGGTGATCCGAAGGTGACGTGGAAGGTGATAAGGTGAGGGACTGAAGGTGAGATATAAAAGGTGAAAGGTGATTAAAGGTGATAAGGTGACTAAGGTGACCGTTAAGGTGAAAGGTGAGAGAAAGGTGAATTAAGGTGACAAAGGTGATAAGGTGAAAGGTGAAAGGTGAAAGGTGAAAGGTGAGAAGGTGAAAGGTGATCAAGGTGAGAAGGTGACTTAAGGTGAAGAAAAGGTGACAAGGTGAACTTAAGGTGAAAGGTGACCGCAAGGTGACAAAGGTGACTTCAATAAAAGTCTATTCAAAAGGTGACGGCGCTAAAGGTGAAAGGTGAGTAAGGTGAGGCAAGGTGAGAAGGTGAAAGGTGAAAGGTGATCGAAAGTCGAAGGTGAAAGGTGAAGAAGGTGACAAGTTACGTAAGGTGACAAGGTGATAAGGTGAAAGGTGAGAGAAGGTGACGAGCAGGAAGGTGACGAAGGTGAAAGGTGACAAGGTGAGGAAAGGTGAAAGGTGACCACAAGGTGAAAGGTGAAAGGTGAAAAGGTGATTAGAAGGTGATAAAGGTGAAAGGTGATAAGGTGAAAGGTGACCAAGGTGATTAATGATAAGGTGAAAGGTGACATCAAAGGTGAAAGGTGACAGAAGGTGATCCAAAGGTGACCGAAGGTGAAAGAATGAAAAGGTGAGTGAAGGTGAACGGTTACAAGGTGATAATACAAAAATCTTAAGGTGAAAGGTGAGAAAGGTGAAAGGTGAAAGGTGACAAGGTGAATGAAGGTGATAAAAGGTGAGATTGAAGGTGA"
	
{-
--
-}

{- >sp|A2Z669|CSPLT_ORYSI CASP-like protein 5A2 OS=Oryza sativa subsp. indica GN=OsI_33147 PE=3 SV=1
MRASRPVVHPVEAPPPAALAVAAAAVAVEAGVGAGGGAAAHGGENAQPRGVRMKDPPGAP
GTPGGLGLRLVQAFFAAAALAVMASTDDFPSVSAFCYLVAAAILQCLWSLSLAVVDIYAL
LVKRSLRNPQAVCIFTIGDGITGTLTLGAACASAGITVLIGNDLNICANNHCASFETATA
MAFISWFALAPSCVLNFWSMASR

>sp|B5ZC00|SYG_UREU1 Glycine--tRNA ligase OS=Ureaplasma urealyticum serovar 10 (strain ATCC 33699 / Western) GN=glyQS PE=3 SV=1
MKNKFKTQEELVNHLKTVGFVFANSEIYNGLANAWDYGPLGVLLKNNLKNLWWKEFVTKQ
KDVVGLDSAIILNPLVWKASGHLDNFSDPLIDCKNCKARYRADKLIESFDENIHIAENSS
NEEFAKVLNDYEISCPTCKQFNWTEIRHFNLMFKTYQGVIEDAKNVVYLRPETAQGIFVN
FKNVQRSMRLHLPFGIAQIGKSFRNEITPGNFIFRTREFEQMEIEFFLKEESAYDIFDKY
LNQIENWLVSACGLSLNNLRKHEHPKEELSHYSKKTIDFEYNFLHGFSELYGIAYRTNYD
LSVHMNLSKKDLTYFDEQTKEKYVPHVIEPSVGVERLLYAILTEATFIEKLENDDERILM
DLKYDLAPYKIAVMPLVNKLKDKAEEIYGKILDLNISATFDNSGSIGKRYRRQDAIGTIY
CLTIDFDSLDDQQDPSFTIRERNSMAQKRIKLSELPLYLNQKAHEDFQRQCQK

>sp|P07204|TRBM_HUMAN Thrombomodulin OS=Homo sapiens GN=THBD PE=1 SV=2
MLGVLVLGALALAGLGFPAPAEPQPGGSQCVEHDCFALYPGPATFLNASQICDGLRGHLM
TVRSSVAADVISLLLNGDGGVGRRRLWIGLQLPPGCGDPKRLGPLRGFQWVTGDNNTSYS
RWARLDLNGAPLCGPLCVAVSAAEATVPSEPIWEEQQCEVKADGFLCEFHFPATCRPLAV
EPGAAAAAVSITYGTPFAARGADFQALPVGSSAAVAPLGLQLMCTAPPGAVQGHWAREAP
GAWDCSVENGGCEHACNAIPGAPRCQCPAGAALQADGRSCTASATQSCNDLCEHFCVPNP
DQPGSYSCMCETGYRLAADQHRCEDVDDCILEPSPCPQRCVNTQGGFECHCYPNYDLVDG
ECVEPVDPCFRANCEYQCQPLNQTSYLCVCAEGFAPIPHEPHRCQMFCNQTACPADCDPN
TQASCECPEGYILDDGFICTDIDECENGGFCSGVCHNLPGTFECICGPDSALARHIGTDC
DSGKVDGGDSGSGEPPPSPTPGSTLTPPAVGLVHSGLLIGISIASLCLVVALLALLCHLR
KKQGAARAKMEYKCAAPSKEVVLQHVRTERTPQRL

>sp|P20840|SAG1_YEAST Alpha-agglutinin OS=Saccharomyces cerevisiae (strain ATCC 204508 / S288c) GN=SAG1 PE=1 SV=2
MFTFLKIILWLFSLALASAININDITFSNLEITPLTANKQPDQGWTATFDFSIADASSIR
EGDEFTLSMPHVYRIKLLNSSQTATISLADGTEAFKCYVSQQAAYLYENTTFTCTAQNDL
SSYNTIDGSITFSLNFSDGGSSYEYELENAKFFKSGPMLVKLGNQMSDVVNFDPAAFTEN
VFHSGRSTGYGSFESYHLGMYCPNGYFLGGTEKIDYDSSNNNVDLDCSSVQVYSSNDFND
WWFPQSYNDTNADVTCFGSNLWITLDEKLYDGEMLWVNALQSLPANVNTIDHALEFQYTC
LDTIANTTYATQFSTTREFIVYQGRNLGTASAKSSFISTTTTDLTSINTSAYSTGSISTV
ETGNRTTSEVISHVVTTSTKLSPTATTSLTIAQTSIYSTDSNITVGTDIHTTSEVISDVE
TISRETASTVVAAPTSTTGWTGAMNTYISQFTSSSFATINSTPIISSSAVFETSDASIVN
VHTENITNTAAVPSEEPTFVNATRNSLNSFCSSKQPSSPSSYTSSPLVSSLSVSKTLLST
SFTPSVPTSNTYIKTKNTGYFEHTALTTSSVGLNSFSETAVSSQGTKIDTFLVSSLIAYP
SSASGSQLSGIQQNFTSTSLMISTYEGKASIFFSAELGSIIFLLLSYLLF


-}